'use strict';

/**
 * Add autogenerated stuff to our docs (`docs/index.md`)
 * @see https://npm.im/markdown-magic
 * @private
 * @module
 */

const {execSync} = require('child_process');
const stripAnsi = require('strip-ansi');
const markdownToc = require('markdown-toc');
const path = require('path');

exports.transforms = {
  usage: (content, options) => {
    const {executable} = options;
    const flag = options.flag || '--help';
    const header = options.header || '\n```plain';
    const footer = options.footer || '```\n';
    const output = stripAnsi(
      String(
        execSync(`${process.execPath} ${executable} ${flag}`, {
          cwd: path.join(__dirname, '..')
        })
      ).trim()
    );
    return [header, output, footer].join('\n\n');
  },
  // we can't use the builtin `TOC` plugin in markdown-magic
  // because it's simply not flexible enough; we can't pad with newlines,
  // nor can we provide a custom filter.  the custom filter would be required
  // since the `TOC` plugin supplies its own which means we can't use the
  // `maxdepth` option, which we need!
  toc: (content, options, config) => {
    const IGNORED_HEADINGS_REGEXP = /Features|Table of Contents/i;
    return (
      '\n' +
      markdownToc(config.outputContent, {
        bullets: options.bullets,
        firsth1: false,
        // if filter is supplied, maxdepth is apparently ignored,
        // so we have to do it ourselves.
        filter: (str, ele) => ele.lvl < 2 && !IGNORED_HEADINGS_REGEXP.test(str)
      }).content +
      '\n'
    );
  },
  manifest: require('markdown-magic-package-json')
};
