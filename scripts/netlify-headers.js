var AssetGraph = require('assetgraph');

var headers = [
    'Content-Security-Policy'
];

var resourceHintTypeMap = {
    HtmlPreloadLink: 'preload',
    HtmlPrefetchLink: 'prefetch',
    HtmlPreconnectLink: 'preconnect',
    HtmlDnsPrefetchLink: 'dns-prefetch'
};

function getHeaderForRelation (rel) {
    let header = `Link: <${rel.href}>; rel=${resourceHintTypeMap[rel.type]}; as=${rel.as}; type=${rel.to.contentType}`;

    if (rel.crossorigin || rel.as === 'font') {
        header = `${header}; crossorigin=anonymous`;
    }

    return header;
}

new AssetGraph({ root: 'docs/_dist' })
    .loadAssets('*.html')
    .populate({
        followRelations: { type: 'HtmlAnchor', crossorigin: false }
    })
    .queue(function (assetGraph) {
        var assets = assetGraph.findAssets({ type: 'Html', isInline: false });

        var headerMap = {};

        assets.forEach(function (asset) {
            var url = '/' + asset.url.replace(assetGraph.root, '').replace(/#.*/, '').replace('index.html', '');
            if (!headerMap[url]) {
                headerMap[url] = [];
            }

            headers.forEach(function (header) {
                var node = asset.parseTree.querySelector('meta[http-equiv=' + header + ']');

                if (node) {
                    headerMap[url].push(`${header}: ${node.getAttribute('content')}`)

                    node.parentNode.removeChild(node);
                    asset.markDirty();
                }
            });

            var firstCssRel = asset.outgoingRelations.filter(r => {
                return r.type === 'HtmlStyle'
                    && r.crossorigin === false
                    && r.href !== undefined;
            })[0];

            if (firstCssRel) {
                const header = `Link: <${firstCssRel.href}>; rel=preload; as=style`;


                headerMap[url].push(header);
            }

            var resourceHintRelations = asset.outgoingRelations.filter(r => ['HtmlPreloadLink', 'HtmlPrefetchLink'].includes(r.type));

            resourceHintRelations.forEach(rel => {
                headerMap[url].push(getHeaderForRelation(rel));

                rel.detach();
            });

            var resourceHintRelations = asset.outgoingRelations.filter(r => ['HtmlPreconnectLink'].includes(r.type));

            resourceHintRelations.forEach(rel => {
                let header = `Link: <${rel.href}>; rel=preconnect`;

                if (rel.crossorigin) {
                    header = `${header}; crossorigin=anonymous`;
                }

                headerMap[url].push(header);

                rel.detach();
            });
        });

        console.log('\n## Autogenerated headers:\n')

        Object.keys(headerMap).forEach(function (url) {
            console.log(url);

            var httpHeaders = headerMap[url];

            httpHeaders.forEach(function (header) {
                console.log(`  ${header}`)
            });

            console.log('');
        });

    })
    .writeAssetsToDisc({ isLoaded: true })
    .run();
