
/**
 * Module dependencies.
 */

var EventEmitter = require('events').EventEmitter;

/**
 * Expose `Suite`.
 */

module.exports = Suite;

/**
 * Initialize a new `Suite` with the given `title`.
 *
 * @param {String} title
 * @api private
 */

function Suite(title) {
  this.title    = title;
  this.suites   = [];
  this.tests    = [];
  this.setup    = [];
  this.tearDown = [];
}

/**
 * Inherit from `EventEmitter.prototype`.
 */

Suite.prototype.__proto__ = EventEmitter.prototype;

/**
 * Add a test `setup`.
 *
 * @param {Function} fn
 * @return {Suite} for chaining
 * @api private
 */
Suite.prototype.addSetup = function(setup){
  this.setup.push(setup);
  return this;
}
/**
 * Add a test `tearDown`.
 *
 * @param {Function} fn
 * @return {Suite} for chaining
 * @api private
 */
Suite.prototype.addTearDown = function(tearDown){
  this.tearDown.push(tearDown);
  return this;
}

/**
 * Add a test `suite`.
 *
 * @param {Suite} suite
 * @return {Suite} for chaining
 * @api private
 */

Suite.prototype.addSuite = function(suite){
  suite.parent = this;
  this.suites.push(suite);
  return this;
};

/**
 * Add a `test` to this suite.
 *
 * @param {Test} test
 * @return {Suite} for chaining
 * @api private
 */

Suite.prototype.addTest = function(test){
  test.parent = this;
  this.tests.push(test);
  return this;
};

/**
 * Return the full title generated by recursively
 * concatenating the parent's full title.
 *
 * @return {String}
 * @api public
 */

Suite.prototype.fullTitle = function(){
  if (this.parent) {
    var full = this.parent.fullTitle();
    if (full) return full + ' ' + this.title;
  }
  return this.title;
};

/**
 * Return the total number of tests.
 *
 * @return {Number}
 * @api public
 */

Suite.prototype.total = function(){
  return this.suites.reduce(function(sum, suite){
    return sum + suite.total();
  }, 0) + this.tests.length;
};
